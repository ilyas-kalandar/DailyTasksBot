import settings
import logging
import asyncio
import time

from aiogram.types import Message, ContentTypes
from aiogram import Bot, Dispatcher
from keyboards import tasks_keyboard, tasks_keyboard_for_delete, settings_keyboard
from dbcontroller import DBController
from settings import SLEEP_TIME

logging.basicConfig(level=logging.INFO)
bot = Bot(settings.TOKEN)
dispatcher = Dispatcher(bot)
db = DBController(settings.DB_FILENAME)


@dispatcher.message_handler(commands=['start'])
async def say_hello(message: Message):
    await message.answer_sticker(open("stickers/hello.webp", 'rb'))
    await message.answer("–ü—Ä–∏–≤–µ—Ç, <b>{}</b>! –ú–µ–Ω—è –∑–æ–≤—É—Ç Daily Tasks!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å!".format
                         (message.from_user.first_name),
                         parse_mode='html')

    if not db.get_user(message.from_user.id):
        await bot.send_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        db.add_account(message.from_user.id)

    text = "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n/list - <b>–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>\n"
    text += "/delete - <b>–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–ª–∏–∫–Ω—É–≤ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ –º–æ–∂–Ω–æ –µ–µ —É–¥–∞–ª–∏—Ç—å.</b>\n"
    text += "/settings - <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n"
    text += "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ—Å—Ç–æ <b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!</b>\n\n"
    text += "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞,"
    text += "–∏—Ö –≤—ã –º–æ–∂–µ—Ç–µ <b>–≤–∫–ª—é—á–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</b>\n\n"
    text += "–í 12 —á–∞—Å–æ–≤ –Ω–æ—á–∏, –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ, –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã.\n"
    text += "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!\n"

    await bot.send_message(message.chat.id, text, parse_mode='html')


@dispatcher.message_handler(commands=['list', 'tasks'])
async def show_tasks(message: Message):
    tasks = db.get_tasks(message.from_user.id)
    if tasks:
        await message.reply("–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!", reply_markup=tasks_keyboard(db.get_tasks(message.from_user.id)))
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á! –ù–∞–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–ª–∏ –∂–µ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ :3")


@dispatcher.message_handler(commands='settings')
async def settings(message: Message):
    await message.reply("–í–æ—Ç –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!",
                        reply_markup=settings_keyboard(db.get_user(message.from_user.id)))


@dispatcher.message_handler(commands=['delete'])
async def show_tasks(message: Message):
    tasks = db.get_tasks(message.from_user.id)
    if tasks:
        await message.reply("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–µ",
                            reply_markup=tasks_keyboard_for_delete(db.get_tasks(message.from_user.id)))
    else:
        await message.reply("–õ–æ–ª, —É –≤–∞—Å –¥–∞–∂–µ –∑–∞–¥–∞—á –Ω–µ—Ç ü§®")


@dispatcher.message_handler(content_types=ContentTypes.TEXT)
async def add_task(message: Message):
    if not message.is_command():
        task = db.get_task(message.from_user.id, message.text)
        if not task:
            db.add_task(message.from_user.id, message.text)
            await message.answer("‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –µ—Å—Ç—å, –ø–æ–º–µ—á—É –µ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π! üö©")
            if task.is_completed:
                db.change_task_status(message.from_user.id, message.text)
    else:
        await message.answer("‚ùå –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!")


@dispatcher.callback_query_handler(lambda call: call.data.split()[0] == 'h')
async def handle_task(call):
    message = call.message
    user_id = message.reply_to_message.from_user.id
    task = db.get_task(user_id, call.data[2::])
    if task:
        db.change_task_status(user_id, call.data[2::])
        await bot.edit_message_text(message.text, message.chat.id, message.message_id,
                                    reply_markup=tasks_keyboard(db.get_tasks(user_id)))


@dispatcher.callback_query_handler(lambda call: call.data.split()[0] == 'd')
async def handle_task(call):
    message = call.message
    user_id = message.reply_to_message.from_user.id
    try:
        db.remove_task(user_id, call.data[2::])
    except TypeError:
        await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–∞–≤–∞–π—Ç–µ –Ω–µ –±—É–¥–µ–º :3")

    tasks = db.get_tasks(user_id)
    if tasks:
        await bot.edit_message_text(message.text, message.chat.id, message.message_id,
                                    reply_markup=tasks_keyboard_for_delete(db.get_tasks(user_id)))
    else:
        await bot.delete_message(message.chat.id, message.message_id)


@dispatcher.callback_query_handler(lambda call: call.data.startswith("upd_"))
async def update_settings(call):
    message = call.message
    user_id = message.reply_to_message.from_user.id
    if call.data == 'upd_notifies':
        db.change_notifies_status(user_id)

    elif call.data == 'upd_extend':
        db.change_extend_status(user_id)

    await bot.edit_message_text(message.text, message.chat.id, message.message_id,
                                reply_markup=settings_keyboard(db.get_user(user_id)))


async def notify():
    while True:
        for user in db.get_all_users():
            if user.notifies:
                tasks = db.get_tasks(user.user_id)
                for task in tasks:
                    if not task.is_completed:
                        await bot.send_message(user.user_id,
                                               "–ü—Ä–∏–≤–µ—Ç, —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —è –≤–µ—Ä—é —á—Ç–æ —Ç—ã —Å–º–æ–∂–µ—à—å :3")
                        break

        await asyncio.sleep(SLEEP_TIME)  # wait 4 hours


async def delete_all_tasks():
    while True:
        t = time.localtime()
        if t.tm_hour == 12:
            for user in db.get_all_users():
                if user.extend_task:
                    for task in db.get_tasks(user.user_id):
                        if task.is_completed:
                            db.remove_task(user.user_id, task.name)
                else:
                    db.delete_all_tasks(user.user_id)

                await bot.send_message(user.user_id, "–•—ç–π, –Ω–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞–ª—Å—è! –ü–æ—Ä–∞ —Ä–µ—à–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏!")
                if user.extend_task:
                    await bot.send_message(
                        user.user_id,
                        "–í—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–∞ –∑–∞–±—ã–≤–∞–π—Ç–µ!")

        await asyncio.sleep(600)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(notify())
    loop.create_task(delete_all_tasks())
    loop.run_until_complete(dispatcher.start_polling())
